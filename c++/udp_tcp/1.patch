diff --git a/c++/udp_tcp/src/recv/recv.cpp b/c++/udp_tcp/src/recv/recv.cpp
index c655e24..2318e3c 100644
--- a/c++/udp_tcp/src/recv/recv.cpp
+++ b/c++/udp_tcp/src/recv/recv.cpp
@@ -6,6 +6,7 @@
 int main(int argc, char *argv[ ])
 {
 	Recv *rcv = new Recv;
+	printf("come man()\n");
 	rcv->start();
 	//while()
 }
diff --git a/c++/udp_tcp/src/udpnet.cpp b/c++/udp_tcp/src/udpnet.cpp
index 0aa10c9..9825aa0 100644
--- a/c++/udp_tcp/src/udpnet.cpp
+++ b/c++/udp_tcp/src/udpnet.cpp
@@ -53,6 +53,7 @@ Udp_Net ::~Udp_Net(void)
 
 int Udp_Net :: NetInit(unsigned int ip, unsigned short port)
 {
+	printf("NetInit start \n");
 	udpskt = socket(AF_INET,SOCK_DGRAM,0); // SOCK_DGRAM 指定 UDP 方式
 	if(udpskt == ERRSOCKET)
 	{
@@ -64,8 +65,8 @@ int Udp_Net :: NetInit(unsigned int ip, unsigned short port)
 	local.sin_family = AF_INET;// ipv4
 	local.sin_addr.s_addr = htonl(ip); //网络转换接口
 	local.sin_port = htons(port);
-	//printf("intip = %d ,ip = %s\n",inet_addr("192.168.20.185"),inet_ntoa(local.sin_addr));
-	printf("udpskt = %d\n",udpskt);
+	
+	printf("NetInit() udpskt = %d\n",udpskt);
 	if(bind(udpskt,(struct sockaddr *) &local,sizeof(local)) == ERRSOCKET) //udp 没有 connect()
  	{
 		printf("error bind()\n");
@@ -108,6 +109,7 @@ int Udp_Net :: NetSend(int udpskt, sockaddr_in remote_addr, char *sendbuf, int b
 
 int Udp_Net :: NetRcv(int udpskt, sockaddr_in &addr, char *rcvbuf, int bufflen, double timeout)
 {
+	printf("ip =%s port = %d",inet_ntoa(addr.sin_addr),ntohs(addr.sin_port));
 	int rcv = 0;
 	socklen_t addrlen = sizeof(addr);
 	struct timeval	tWait;
@@ -129,7 +131,8 @@ int Udp_Net :: NetRcv(int udpskt, sockaddr_in &addr, char *rcvbuf, int bufflen,
 		printf("<NetRcv> -- receive buffer length = 0 \n");
 		goto safe_exit;
 	}	
-	
+
+	printf("ip =%s port = %d",inet_ntoa(addr.sin_addr),ntohs(addr.sin_port));
 #if 0		
 	fd_set fd;
 	FD_ZERO(&fd);
@@ -176,6 +179,7 @@ void Udp_Net :: NetClose()
 Recv :: Recv()
 {
 	memset(&recvThreadId, 0, sizeof(pthread_t)); //后面是 类型
+	printf(" Recv()\n");
 	//memset(recvbuff, 0, sizeof(recvbuff));
 	
 }
@@ -210,7 +214,7 @@ int Recv :: recvdata()
 		printf("recv_size = %d recv_size = %s \n",recv_size,recv_size);
 		if(recv_size = ERRSOCKET)
 		{
-			printf("NetRcv  error \n");
+			printf(" NetRcv  error \n");
 			udpnet.NetClose();
 			//re.udpnet.NetInit(INADDR_ANY, SEND_PORT);
 			exit(0);
